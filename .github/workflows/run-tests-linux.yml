name: Run tests Linux
on:
  workflow_call:
  pull_request:
  push:
    branches:
      - dotty-experimental
concurrency:
  group: linux-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  # Compile all sources for given Scala version
  # Cache external dependencies
  # Test tools, if any of them fails, further tests will not start.
  tests-tools:
    name: Compile & test tools
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        scala: [3, "3-next"]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Test tools
        run: sbt "-no-colors" "-J-Xmx3G" "test-tools ${{ matrix.scala }}"

  #Main tests grid. Builds and runs tests agains multiple combination of GC, Build mode and Scala Version
  #It can be extended to test against different OS and Arch settings
  test-runtime:
    name: Test runtime
    runs-on: ubuntu-20.04
    needs: tests-tools
    strategy:
      fail-fast: false
      matrix:
        scala: [3, "3-next"]
        build-mode: [debug, release-fast]
        gc: [boehm, immix, commix]
        # Create holes in grid to lower number of tests.
        # Excluded entries should have low impact on overall project coverage
        exclude:
          - scala: 3
            build-mode: debug
            gc: immix
          - scala: 3
            build-mode: release-fast
            gc: commix
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: ${{ matrix.gc }}
          SCALANATIVE_OPTIMIZE: true
        run: sbt "test-runtime ${{ matrix.scala }}"

  # This job is basically copy-paste of test-runtime.
  # Main difference is disabled optimization and fixed Immix GC
  test-runtime-no-opt:
    name: Test runtime no-opt
    runs-on: ubuntu-20.04
    needs: tests-tools
    strategy:
      fail-fast: false
      matrix:
        scala: [3, "3-next"]
        build-mode: [debug]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: immix
          SCALANATIVE_OPTIMIZE: false
        run: sbt "test-runtime ${{ matrix.scala }}"

  test-runtime-lto:
    name: Test runtime LTO
    runs-on: ubuntu-20.04
    needs: tests-tools
    strategy:
      fail-fast: false
      matrix:
        scala: [3, "3-next"]
        lto: [thin]
        optimize: [true]
        include:
          # LTO full fails with 3.1 in the CI - we were not able to reproduce it locally
          - scala: 3.2.1
            lto: full
            optimize: false

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Run tests
        env:
          SCALANATIVE_MODE: release-fast
          SCALANATIVE_GC: immix
          SCALANATIVE_OPTIMIZE: ${{matrix.optimize}}
          SCALANATIVE_LTO: ${{matrix.lto}}
        run: sbt "test-runtime ${{ matrix.scala }}"

  # This job is basically copy-paste of test-runtime.
  # Scripted tests take a long time to run, ~30 minutes, and should be limited and absolute minimum.
  test-scripted:
    name: Test scripted
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        scala: [3, "3-next"]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Run tests
        env:
          SCALANATIVE_MODE: release-fast
          SCALANATIVE_GC: immix
          SCALANATIVE_OPTIMIZE: true
        run: |
          export LLVM_BIN=$(dirname $(readlink -f /usr/bin/clang))
          sbt "test-scripted ${{matrix.scala}}"
